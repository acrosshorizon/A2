class Node:
    def __init__(self, start=-1, end=-1, parent=None):
        self.start = start
        self.end = end
        self.suffixLink = None
        self.children = {}
        self.parent = parent

    def __repr__(self):
        return "Node(start={}, end={}, edges={})".format(self.start, self.end, dict(sorted(self.children.items())))


class SuffixTree:
    def __init__(self, s: str):
        self.string = s
        self.root = Node()
        self.activeNode = self.root
        self.suffixLink = self.root
        self.activeEdge = 0
        self.activeLength = 0
        self.remainder = 0
        self.globalEnd = -1
        self.lastInternalNode = None
        self.suffixArray = []
        self.constructSuffixTree()

    def constructSuffixTree(self):
        for i in range(len(self.string)):
            # increase remainder, global end for every index of string
            self.globalEnd += 1
            self.remainder += 1
            self.lastInternalNode = None
            while self.remainder > 0:
                if self.activeLength == 0:
                    self.activeEdge = i
                # Create leaf node if there is no branch starting with char at index i
                if self.string[self.activeEdge] not in self.activeNode.children:
                    self.activeNode.children[self.string[self.activeEdge]] = Node(i, self.globalEnd)
                    self.createSuffixLink(self.activeNode)
                # Split the branch if exist a branch starting with char at index i
                else:
                    newNode = self.activeNode.children[self.string[self.activeEdge]]
                    if self.walkDown(newNode):
                        continue
                    if self.string[newNode.start + self.activeLength] == self.string[i]:
                        self.createSuffixLink(self.activeNode)
                        self.activeLength += 1
                        break
                    splitNode = Node(newNode.start, newNode.start + self.activeLength - 1)
                    self.activeNode.children[self.string[self.activeEdge]] = splitNode
                    splitNode.children[self.string[i]] = Node(i, self.globalEnd)
                    newNode.start += self.activeLength
                    splitNode.children[self.string[newNode.start]] = newNode
                    self.createSuffixLink(splitNode)
                self.remainder -= 1
                if self.activeNode == self.root and self.activeLength > 0:
                    self.activeLength -= 1
                    self.activeEdge = i - self.remainder + 1
                else:
                    #self.activeNode = self.activeNode.suffixLink if self.activeNode.suffixLink is not None else self.root

                    if self.activeNode.suffixLink is not None:
                        self.activeNode = self.activeNode.suffixLink
                    else:
                        self.activeNode = self.root

    def createSuffixLink(self, node: Node):
        if self.lastInternalNode is not None:
            self.lastInternalNode.suffixLink = node
        self.lastInternalNode = node

    def walkDown(self, node: Node):
        edgeLength = min(node.end, self.globalEnd) - node.start + 1
        if self.activeLength >= edgeLength:
            self.activeLength -= edgeLength
            self.activeEdge += edgeLength
            self.activeNode = node
            return True
        return False

    def __repr__(self):
        return str(self.root)


text = "missisippi$"
suffix_tree = SuffixTree(text)
print(suffix_tree)
